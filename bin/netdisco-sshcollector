#!/usr/bin/perl

# vim: set expandtab tabstop=8 softtabstop=4 shiftwidth=4:

=head1 NAME

netdisco-sshcollector - Collect ARP data for Netdisco from devices
without full SNMP support

=head1 SYNOPSIS

    netdisco-sshcollector [-i inputfile] [-c netdisco_config] [-w workers]

=head1 DESCRIPTION

This program collects ARP data for Netdisco from devices without
full SNMP support. Currently, ARP tables can be retrieved from the
following device classes:

=over 4

=item * C<Netdisco::SSHCollector::Devices::ACE> - Cisco ACE

=item * C<Netdisco::SSHCollector::Devices::BigIP> - F5 Networks BigIP

=item * C<Netdisco::SSHCollector::Devices::IOSXR> - Cisco IOS XR 

=back

The collected arp entries are then directly stored in the netdisco
database.

=head1 USAGE

=over 4

=item C<-i inputfile>

Data is collected from the machines specified in this file. The
format is five tab-separated columns: hostname, ipaddress,
username, password, devicetpye. Blank lines and lines with a
leading # are ignored.

Devicetype is the final part of the classname to be instantiated
to query the host, e.g. devicetype B<ACE> will be queried using 
C<Netdisco::SSHCollector::Devices::ACE>.

If the hostname is "-", the SSH session will be established using the
ip address.
If the password is "-", public key authentication will be attempted.

Parameter defaults to ../etc/netdisco-sshcollector-hosts.csv.

=item C<-c netdisco_config>

Used to find the database of the local netdisco installation.

Parameter defaults to /usr/share/netdisco/netdisco.conf.


=item C<-w workers>

Number of parallel processes launched. 

Parameter defaults to 10.

=back

=head1 INPUT FILE EXAMPLE

 #host	ipaddress	user	password	devicetype
 host1	10.0.0.1	bob	$ecret77	BigIP
 -	10.0.1.5	alice	-	ACE

=head1 ADDING DEVICES

Additional device classes can be easily integrated just by adding
and additonal class to the C<Netdisco::SSHCollector::Devices> package. 
This class must implement an C<arpnip($hostname, $ssh)> method which 
returns an array of hashrefs in the format

   @result = ({ ip => IPADDR, mac => MACADDR }, ...) 

The parameter C<$ssh> is an active C<Net::OpenSSH> connection to the 
host. Depending on the target system, it can be queried using simple
methods like

   my @data = $ssh->capture("show whatever")
or automated via Expect - this is mostly useful for non-Linux 
appliances which don't support command execution via ssh:

    my ($pty, $pid) = $ssh->open2pty or die "unable to run remote command";
    my $expect = Expect->init($pty);
    my $prompt = qr/#/;
    my ($pos, $error, $match, $before, $after) = $expect->expect(10, -re, $prompt);
    $expect->send("terminal length 0\n");

    # etc...

The returned IP and MAC addresses should be in a format that the 
respective B<inetaddr> and B<macaddr> datatypes in PostgreSQL can
handle.   



=head1 DEPENDENCIES

=over 4

=item C<Cache::Cache>

=item C<Net::OpenSSH>

=item C<Module::Load>

=item C<Parallel::ForkManager>

=item C<Sys::RunAlone>

=item C<netdisco>

=back

The non-netdisco modules can be obtained from CPAN. Alternatively if you
can't use CPAN and your distro doesn't provide these packages, you can
add the C<cpanlib> directory to C<PERLLIB>, it contains fairly recent
versions of all dependencies. These are all pure Perl modules which
should work on any platform.

The module netdisco.pm comes with the netdisco installation.

It is likely necessary to add the netdisco base directory
(containing netdisco and netdisco.pm) to PERLLIB or the
B<use lib> statement.



=head1 AUTHOR

Christian Ramseyer, netnea ag, <ramseyer at netnea dot com>

=head1 CREDITS

=over 4

=item B<Oliver Gorwits> E<lt>oliver at cpan dot orgE<gt> made the Netdisco2 port and 
included it in the main distribution

=item B<Claes Jansson> E<lt>Claes at gastabud dot comE<gt> contributed the IOSXR module

=item B<Jiri Dvorak> E<lt>jiri at netnea dot comE<gt> and B<Charles Bueche>
E<lt>bueche at netnea dot comE<gt> provided valuable feedback and cookies.

=back

=head1 COPYRIGHT AND LICENSE

 This software is copyright (c) 2013 by The Netdisco Developer Team.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
     * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
     * Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
     * Neither the name of the Netdisco Project nor the
       names of its contributors may be used to endorse or promote products
       derived from this software without specific prior written permission.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL THE NETDISCO DEVELOPER TEAM BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


 When redistributing netdisco-sshcollector, please note that the Perl modules in
 the cpanlib directory are subject to their own individual license terms.


=cut



use warnings;
use strict;

use FindBin;
use lib (
    "$FindBin::Bin/../",
    "$FindBin::Bin/../lib",
    "$FindBin::Bin/../git/perllib"
);

use Cache::FileCache;
use Data::Dumper;
use Getopt::Long;
use Module::Load;
use Net::OpenSSH;
use Parallel::ForkManager;
use Sys::RunAlone;
use netdisco qw(config add_arp sql_begin sql_commit);

#this may be helpful with SSH issues:
#$Net::OpenSSH::debug = ~0;

my $namespace = "netdisco-sshcollector";
my $oconfig = "/usr/share/netdisco/netdisco.conf";
my $oinput = "../etc/netdisco-sshcollector-hosts.csv";
my $oworkers = 10;
my $cache = Cache::FileCache->new({namespace => $namespace});

my %stats;

exit main();

sub main {

    GetOptions(
        "config=s" => \$oconfig,
        "input=s" => \$oinput,
        "workers=i" => \$oworkers,
    );

    die "Can't read netdisco config: $oconfig" unless (-r $oconfig);
    die "Can't read input file: $oinput" unless (-r $oinput);

    $cache->clear;
    my @input = readinput();

    my $pm = Parallel::ForkManager->new($oworkers);

    foreach my $host (@input){

        my $pid = $pm->start and next;
        my $hostlabel = $host->{hostname} eq "-" ? $host->{ip} : $host->{hostname};

        my $ssh = Net::OpenSSH->new(
                $hostlabel,
                user => $host->{user},
                password => $host->{password},
                timeout => 30,
                async => 0,
                master_opts => [
                        -o => "StrictHostKeyChecking=no",
                        -o => "BatchMode=no"
                ],
        );

        process($hostlabel, $ssh, $host);
        $pm->finish;

    }

    $pm->wait_all_children;

    for my $host ($cache->get_keys()){
        $stats{host}++;
        my $arpentries = $cache->get($host);
        print $host . ": " .@${arpentries}. " entries obtained\n";
        store_arpentries($arpentries);
    }

    print "Collected ", $stats{entry}, " arp entries from ", $stats{host}, " hosts\n";

    return 0;
}

sub process {

    my ($hostlabel, $ssh, $args) = @_;

    my $class = "Netdisco::SSHCollector::Devices::".$args->{devicetype};
    load $class;

    my $device = $class->new();
    my @arpentries = $device->arpnip($hostlabel, $ssh, $args);

    #print Dumper \@arpentries;

    if (@arpentries){
        $cache->set("$hostlabel", \@arpentries)
    }else{
        print STDERR "WARNING: no entries received from <$hostlabel>\n";

    }

}

sub store_arpentries {

    my ($arpentries) = @_;

    config($oconfig);
    sql_begin(['node_ip']);

    foreach my $arpentry(@{$arpentries}){

        # skip broadcast/vrrp/hsrp and other wierdos
        next if $arpentry->{mac} =~ /^(ff:ff:ff:ff:ff:ff|0:0:5e:0|0:0:c:7:ac)/i;

        # normalize separator to ":"
        $arpentry->{mac} =~ s/\./:/g;

        print "Entry: " . $arpentry->{mac} . " " .  $arpentry->{ip} . "\n";
        add_arp($arpentry->{mac}, $arpentry->{ip});

        $stats{entry}++;
    }

    sql_commit();
}

sub readinput {

    open(INPUT, $oinput) or die "Failed to open input file $oinput: $!";
    my @input;

    while(<INPUT>){
        next if m/^(#|$)/;
        chomp;
        my ($hostname, $ip, $user, $password, $devicetype) = split(/\t/);

        if ($devicetype){

            push(@input, {
                    hostname => $hostname eq "-" ? $ip : $hostname,
                    ip => $ip,
                    user => $user, password => $password,
                    devicetype => $devicetype}
            );
        }else{
            print STDERR "WARNING: illegal input record: $_\n";
        }
    }

    unless(@input){
        die "No valid records in input file $oinput" ;
    }

    return @input;
}

__END__

